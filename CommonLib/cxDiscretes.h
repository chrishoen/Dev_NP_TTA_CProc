#pragma once

/*==============================================================================
gpio disacrete i/o
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include "GPIO.h"
using namespace exploringBB;

namespace CX
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This class provides gpio discrete i/o.

class Discretes
{
public:
   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members:

   // Discrete i/o via gpio. Auxiliary alarm inputs.
   GPIO mAuxAlarm0In;
   GPIO mAuxAlarm1In;
   GPIO mAuxAlarm2In;
   GPIO mAuxAlarm3In;
   GPIO mAuxAlarm4In;

   // These point to the above.
   GPIO* mAuxAlarmIn[5];

   // Discrete i/o via gpio. Panel leds and buzzer outputs.
   GPIO mModeLed;
   GPIO mStatusLed;
   GPIO mBuzzer;

   // Discrete i/o via gpio. status putputs.
   GPIO mTTA0Out;
   GPIO mTTA1Out;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods:

   // Constructor.
   Discretes();
   void initialize();
   void finalize();
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Global instance

#ifdef _CXDISCRETES_CPP_
          Discretes gDiscretes;
#else
   extern Discretes gDiscretes;
#endif

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace

