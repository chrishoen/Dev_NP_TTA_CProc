#pragma once

/*==============================================================================
Provides a class for an atmel transmit messages encoder.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

namespace SX
{

//******************************************************************************
//******************************************************************************
//******************************************************************************
// This is a class that provides a function that copies a receive message
// into a member receive message buffer. It then decodes and validates the
// message. It is intended that this is used by the 
// the comm thread to decode messages. It is not thread safe.

   class TTARxMsgDecoder
{
public:

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Constants.

   static const int cMaxStringSize = 2000;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.

   // Full receive message string to be decoded and validated.
   char mRxBuffer[cMaxStringSize];

   // Result. If true then the receive message is valid.
   bool mRxValid;

   // Result. The receive message identifier.
   int mRxMsgId;

   // Result. If true then marker is val else data.
   bool mRxValMarker;

   // Result. The receive message payload.
   char mRxPayload[cMaxStringSize];

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Members.
   
   // Print filters.
   int mPF1;

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Constructor.
   TTARxMsgDecoder();
   void resetVars();

   //***************************************************************************
   //***************************************************************************
   //***************************************************************************
   // Methods.

   // Copy the receive message string to the receive buffer and process the 
   // receive buffer. Decode and validate the message and set the result member
   // variables accordingly. Return true if the message is valid.
   bool decodeMsg(const char* aRxString);
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


